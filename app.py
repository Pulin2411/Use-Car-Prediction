{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM+//tAUTYasQqWEvjTDqol"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"YqzrXDZnDcCt"},"outputs":[],"source":["#!/usr/bin/env python3\n","import pickle\n","import pandas as pd\n","import streamlit as st\n","\n","# ---------------- Config ----------------\n","MODEL_PATH = \"best_model_GradientBoosting.pickle\"\n","CURRENT_YEAR = 2025\n","\n","# ---------------- Load Model ----------------\n","@st.cache_resource(show_spinner=False)\n","def load_model():\n","    with open(MODEL_PATH, \"rb\") as f:\n","        model = pickle.load(f)\n","    return model\n","\n","model = load_model()\n","\n","# ---------------- UI ----------------\n","st.set_page_config(page_title=\"Used Car Price Predictor\", page_icon=\"ðŸš—\", layout=\"centered\")\n","st.title(\"ðŸš— Used Car Price Predictor\")\n","st.caption(f\"Model loaded from: {MODEL_PATH}\")\n","\n","# ---------------- Single Prediction ----------------\n","with st.form(\"predict_form\"):\n","    col1, col2 = st.columns(2)\n","    with col1:\n","        year = st.number_input(\"Year\", min_value=1980, max_value=CURRENT_YEAR, value=2016, step=1)\n","        fuel = st.selectbox(\"Fuel\", [\"Petrol\", \"Diesel\", \"CNG\", \"LPG\", \"Electric\", \"Unknown\"])\n","        transmission = st.selectbox(\"Transmission\", [\"Manual\", \"Automatic\", \"Unknown\"])\n","    with col2:\n","        km_driven = st.number_input(\"Kilometers Driven\", min_value=0, max_value=1000000, value=52000, step=100)\n","        seller_type = st.selectbox(\"Seller Type\", [\"Individual\", \"Dealer\", \"Trustmark Dealer\", \"Unknown\"])\n","        owner = st.selectbox(\"Owner\", [\n","            \"First Owner\",\n","            \"Second Owner\",\n","            \"Third Owner\",\n","            \"Fourth & Above Owner\",\n","            \"Test Drive Car\",\n","            \"Unknown\",\n","        ])\n","\n","    submitted = st.form_submit_button(\"Predict\")\n","\n","if submitted:\n","    car_age = CURRENT_YEAR - int(year)\n","    X = pd.DataFrame([{\n","        \"km_driven\": float(km_driven),\n","        \"car_age\": float(car_age),\n","        \"fuel\": str(fuel),\n","        \"seller_type\": str(seller_type),\n","        \"transmission\": str(transmission),\n","        \"owner\": str(owner),\n","    }])\n","    try:\n","        pred = float(model.predict(X)[0])\n","        st.success(f\"Estimated Price: â‚¹ {pred:,.0f}\")\n","        with st.expander(\"View input features\"):\n","            st.write(X)\n","    except Exception as e:\n","        st.error(f\"Prediction failed: {e}\")\n","\n","# ---------------- Batch Predictions ----------------\n","st.markdown(\"---\")\n","st.subheader(\"Batch predictions (CSV)\")\n","st.caption(\"Upload a CSV with columns: year, km_driven, fuel, seller_type, transmission, owner.\")\n","\n","file = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\n","if file is not None:\n","    try:\n","        df = pd.read_csv(file)\n","        if \"year\" in df.columns:\n","            df[\"car_age\"] = CURRENT_YEAR - pd.to_numeric(df[\"year\"], errors=\"coerce\")\n","\n","        required = [\"km_driven\", \"car_age\", \"fuel\", \"seller_type\", \"transmission\", \"owner\"]\n","        missing = [c for c in required if c not in df.columns]\n","        if missing:\n","            st.error(f\"Missing required columns after processing: {missing}\")\n","        else:\n","            preds = model.predict(df[required])\n","            out = df.copy()\n","            out[\"predicted_price\"] = preds\n","            st.dataframe(out.head(20))\n","            st.download_button(\"Download predictions\", data=out.to_csv(index=False), file_name=\"predictions.csv\", mime=\"text/csv\")\n","    except Exception as e:\n","        st.error(f\"Batch prediction failed: {e}\")\n"]}]}
